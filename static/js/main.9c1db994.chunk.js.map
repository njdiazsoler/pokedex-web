{"version":3,"sources":["components/CustomAlert.js","components/CustomCard.js","components/PageFooter.js","components/TextInputWithButton.js","App.js","serviceWorker.js","index.js"],"names":["CustomAlert","props","alertMessage","alertVariant","dismissible","handleAlert","showAlert","Alert","onClose","show","variant","defaultProps","CustomCard","name","cardData","Card","className","charAt","toUpperCase","slice","PageFooter","Container","Row","Col","href","rel","target","TextInputWithButton","buttonText","onInputChange","placeholder","InputGroup","size","FormControl","onChange","Append","Button","id","App","getAllPokemon","a","P","Pokedex","getPokemonsList","poke","setState","pokemonData","results","pokemon","searchValue","message","isLoadingData","handleInputChange","e","value","prevState","state","filteredPoke","filter","match","updateWindowDimensions","windowHeight","window","innerHeight","isAlertShown","this","addEventListener","Fade","in","CardGroup","style","height","parseInt","overflowY","length","map","key","lg","md","Component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9c1db994.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CustomAlert = (props) => {\r\n  const { alertMessage, alertVariant, dismissible, handleAlert, showAlert } = props;\r\n  return (\r\n    <Alert \r\n      dismissible={dismissible} \r\n      onClose={() => handleAlert(false)} \r\n      show={showAlert} \r\n      variant={alertVariant}>\r\n      {alertMessage}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nCustomAlert.propTypes = {\r\n  alertMessage: PropTypes.string.isRequired,\r\n  alertVariant: PropTypes.string.isRequired,\r\n  dismissisble: PropTypes.bool,\r\n  showAlert: PropTypes.bool,\r\n  handleAlert: PropTypes.func.isRequired,\r\n}\r\n\r\nCustomAlert.defaultProps = {\r\n  dismissible: true,\r\n  showAlert: false,\r\n}\r\n\r\nexport default CustomAlert;\r\n","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst CustomCard = props => {\r\n  const { name } = props.cardData;\r\n  return(<Card className='pokedex-card px-1 py-2'>\r\n    <p>{`${name.charAt(0).toUpperCase()}${name.slice(1)}`}</p>\r\n  </Card>)\r\n}\r\n\r\nexport default CustomCard;","import React from 'react';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\n\r\nconst PageFooter = (props) => {\r\n  return (\r\n    <Container>\r\n      <Row className=\"pt-2\">\r\n        <Col className=\"d-flex flex-row\" >\r\n          <p className=\"m-0\">Made by Nico Díaz Soler</p>\r\n          {/* <i className=\"nes-ash is-small\" /> */}\r\n        </Col>\r\n        <Col \r\n          className=\"d-flex flex-row-reverse align-items-center flex-wrap justify-content-center\">\r\n          <div className=\"mx-1\">\r\n            <a href=\"https://github.com/njdiazsoler\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n              Github\r\n            </a>\r\n          </div>\r\n          <i className=\"nes-icon github is-small\" />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PageFooter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, FormControl, InputGroup } from 'react-bootstrap';\r\n\r\nconst TextInputWithButton = (props) => {\r\n  const { buttonText, onInputChange, placeholder } = props;\r\n  return (\r\n    <InputGroup size=\"sm\" className=\"align-items-center mx-3\">\r\n      <FormControl onChange={onInputChange} className=\"nes-container is-rounded mx-0\" placeholder={placeholder}/>\r\n      <InputGroup.Append>\r\n        <Button className=\"nes-btn\" id=\"basic-addon2\">\r\n          {buttonText}\r\n        </Button>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  );\r\n};\r\n\r\nTextInputWithButton.propTypes = {\r\n  buttonText: PropTypes.string.isRequired,\r\n  onInputChange: PropTypes.func.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default TextInputWithButton;\r\n","import React, { Component } from 'react';\nimport { Pokedex } from 'pokeapi-js-wrapper';\nimport { CustomAlert, CustomCard, PageFooter, TextInputWithButton } from './components';\nimport { CardGroup, Col, Container, Fade, Row } from 'react-bootstrap';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alertVariant: 'success',\n      alertMessage: '',\n      isAlertShown: false,\n      isLoadingData: true,\n      pokemon: [],\n      searchValue: '',\n      windowHeight: 0,\n    };\n  }\n\n  getAllPokemon = async (name) => {\n    const P = new Pokedex();\n    try {\n      const poke = await P.getPokemonsList();\n      this.setState({ pokemonData: poke.results, pokemon: poke.results, searchValue: 'bul' });\n    } catch (err) {\n      this.setState({ showAlert: true, alertMessage: err.message, alertVariant: 'danger' });\n    } finally {\n      this.setState({ isLoadingData: false });\n    }\n  };\n\n  componentDidMount() {\n    this.getAllPokemon();\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  handleInputChange = (e) => {\n    const { value } = e.target;\n\n    this.setState((prevState, state) => {\n      const { pokemonData } = prevState;\n      const filteredPoke = pokemonData.filter((poke) => poke.name.match(value));\n      return { searchValue: value, pokemon: filteredPoke };\n    });\n  };\n\n  updateWindowDimensions = () => {\n    this.setState({ windowHeight: window.innerHeight });\n  };\n\n  render() {\n    const { pokemon, windowHeight } = this.state;\n    return (\n      <Fade in={!this.state.isLoadingData}>\n        <Container>\n          <CustomAlert\n            alertMessage={this.state.alertMessage}\n            alertVariant={this.state.alertVariant}\n            dismissible={this.state.dismissible}\n            handleAlert={(value) => this.setState({ isAlertShown: value })}\n            showAlert={this.state.isAlertShown}\n          />\n          <h3 className=\"py-3\">Pokémon Finder</h3>\n          <Row className=\"my-2\">\n            <TextInputWithButton buttonText=\"Find\" onInputChange={this.handleInputChange} placeholder=\"Find Pokémon\" />\n          </Row>\n          <CardGroup style={{ height: parseInt(`${windowHeight * 0.69}`, 10), overflowY: 'overlay' }} className=\"my-2 nes-container is-rounded mx-0\">\n            {pokemon.length > 0 &&\n              pokemon.map((poke) => (\n                <Col key={poke.name} className=\"p-1\" lg={3} md={4}>\n                  <CustomCard cardData={poke} />\n                </Col>\n              ))}\n          </CardGroup>\n          {/* TO DO - Pagination \n          <Row className=\"nes-container is-rounded mx-0 my-2\">\n            <PageFooter />\n          </Row> */}\n          <Row className=\"nes-container is-rounded mx-0 my-3\">\n            <PageFooter />\n          </Row>\n        </Container>\n      </Fade>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"nes.css/css/nes.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}